
=head1 Beginning Perl

In this git repository are several examples and documents demonstrating common use of perl within TGI,
though probably moreso in the APIPE and Systems teams.  The LIMS group makes use of a different
object-relation mapper and their styles differ for that reason.

I am hoping that these files will provide a good framework for producing perl applications that:

 * Are object oriented in style
 * Make use of Module::Build (ie. Build.PL)
 * Include unit tests
 * Include debian packaging
 * Demonstrate some common things like parsing command line options

=head1 The Perl Interpreter

Which one are we using?

 * /usr/bin/perl      The perl on the local host
 * /gsc/bin/perl      The perl on the TGI appserver
 * /usr/bin/env perl  What the environment returns from PATH
 * some other perl    Maybe from perlbrew or something else

=head1 Building Applications

We commonly use Build.PL like this:

 * /usr/bin/perl Build.PL
 * ./Build
 * ./Build test

These steps happen automatically when one builds a debian package, assuming there is a ./debian directory.
To build a package, run:

 * dpkg-buildpackage

Which produces the files:

  ../packagename_0.01-1.dsc
  ../packagename_0.01-1.tar.gz
  ../packagename_0.01-1_all.deb
  ../packagename_0.01-1_amd64.changes

Inspect them via:

  dpkg -c ../packagename_0.01-1_all.deb # See files in the package
  dpkg -I ../packagename_0.01-1_all.deb # See metadata about the package

=head1 Object Oriented Perl

Object oriented programming offers a means of abstraction that allows for better reuse of code.

=head1 Unit Testing

=head1 Command Line Option Parsing

=head1 POD Documentation

=head1 Debian Packaging

=head1 References

http://www.perl.com/pub/2001/11/07/ooperl.html

=cut
